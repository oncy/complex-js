{"version":3,"sources":["node_modules/browser-pack/_prelude.js","parser/index.js","src/cartesian.js","src/complex.js","src/long.js","src/polar.js","src/utils.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","Complex","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","peg$subclass","child","parent","ctor","constructor","prototype","peg$SyntaxError","message","expected","found","location","name","captureStackTrace","peg$parse","input","options","text","substring","peg$savedPos","peg$currPos","error","peg$computeLocation","peg$buildSimpleError","peg$literalExpectation","ignoreCase","type","peg$classExpectation","parts","inverted","peg$endExpectation","peg$otherExpectation","description","peg$computePosDetails","pos","p","details","peg$posDetailsCache","line","column","charCodeAt","startPos","endPos","startPosDetails","endPosDetails","start","offset","end","peg$fail","peg$maxFailPos","peg$maxFailExpected","push","peg$buildStructuredError","buildMessage","peg$parseExpression","s0","s1","s2","s3","peg$silentFails","peg$parse_","peg$FAILED","peg$parseShift","peg$c1","peg$c0","s4","s5","peg$parseScale","peg$c2","peg$c3","peg$parseNestedShift","peg$c4","peg$c5","peg$c6","peg$c7","peg$c8","peg$c9","peg$c10","peg$c11","peg$c12","peg$c13","peg$parsePowerNegate","peg$parseNestedScale","peg$c14","peg$c15","peg$c16","peg$parseNestedScaleWithNegate","peg$c17","peg$c18","peg$c19","peg$c20","peg$c21","peg$c22","peg$parsePower","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","peg$c28","peg$c29","peg$c30","peg$c31","peg$parseGroup","peg$c32","peg$c33","substr","peg$c34","peg$c35","peg$c36","peg$c37","peg$c38","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","peg$c48","peg$c49","peg$c50","peg$parseFunction","s6","s7","peg$parseIdentifier","peg$parseComma","peg$c52","peg$parseValue","peg$c51","peg$c53","peg$c54","peg$c55","peg$c56","peg$c57","peg$parseNumber","peg$c59","test","charAt","peg$c60","peg$c61","peg$c62","peg$c63","peg$c58","peg$parseFloat","peg$c65","peg$c66","peg$c67","peg$c68","peg$parseInteger","peg$c69","peg$c64","peg$c70","peg$c71","peg$c72","peg$c73","peg$c75","peg$c76","peg$c74","isComplex","parameter","cache","value","index","cached","findIndex","equals","getFunction","id","parameters","toLowerCase","canEval","every","hasOwnProperty","apply","map","join","getValue","toUpperCase","indexOf","getOperation","left","right","operand","peg$result","peg$startRuleFunctions","Expression","peg$startRuleFunction","result","operator","concat","Cartesian","startRule","hex","ch","toString","literalEscape","replace","classEscape","describeExpectation","expectation","DESCRIBE_EXPECTATION_FNS","describeExpected","j","descriptions","Array","sort","slice","describeFound","literal","class","escapedParts","any","other","SyntaxError","parse","utils","real","arguments","undefined","imag","mulDescriptor","nonEnumerable","that","divDescriptor","Object","create","abs","configurable","enumerable","get","Math","sqrt","set","defineProperty","writable","arg","atan2","PI","multiply","times","mul","*","divide","div","/","isFinite","isNaN","negate","conjugate","normalize","square","cube","parser","sinh","number","NaN","exp","cosh","Number","EPSILON","_createClass","key","complex","isReal","isImag","sign","floor","ceil","round","truncate","Polar","pow","log","cos","sin","real2","imag2","denom","NEG_I","sub","ONE","add","I","iz","TWO_I","acos","asin","TWO","acosh","asinh","minimum","Infinity","maximum","ZERO","string","unshift","Function","bind","polar","toPrecision","_imag","maxUlps","Long","withinMaxUlps","remainder","idz","defineProperties","NEG_ONE","E","equDescriptor","addDescriptor","subDescriptor","subtract","modDescriptor","modulo","powDescriptor","power","equ","=","plus","+","minus","-","mod","%","^","**","u48","u32","u16","u00","float64Array","uint16Array","b","_Long$fromFloat64$sub","fromFloat64","hi","lo","int32","arrayBuffer","ArrayBuffer","Float64Array","Uint16Array","transform"],"mappings":"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","file":"complex.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { Expression: peg$parseExpression },\n      peg$startRuleFunction  = peg$parseExpression,\n\n      peg$c0 = peg$otherExpectation(\"expression\"),\n      peg$c1 = function(result) { return cache(result); },\n      peg$c2 = \"+\",\n      peg$c3 = peg$literalExpectation(\"+\", false),\n      peg$c4 = function(left, right) { return getOperation(getOperation(left, right.left, 'add'), right.right, right.operator); },\n      peg$c5 = \"-\",\n      peg$c6 = peg$literalExpectation(\"-\", false),\n      peg$c7 = function(left, right) { return getOperation(getOperation(left, right.left, 'subtract'), right.right, right.operator); },\n      peg$c8 = function(left, right) { return getOperation(left, right, 'add'); },\n      peg$c9 = function(left, right) { return getOperation(left, right, 'subtract'); },\n      peg$c10 = function(left, right) { return {left: getOperation(left, right.left, 'add'), right: right.right, operator: right.operator}; },\n      peg$c11 = function(left, right) { return {left: getOperation(left, right.left, 'subtract'), right: right.right, operator: right.operator}; },\n      peg$c12 = function(left, right) { return {left, right, operator: 'add'}; },\n      peg$c13 = function(left, right) { return {left, right, operator: 'subtract'}; },\n      peg$c14 = function(left, right) { return getOperation(getOperation(left, right.left, 'multiply'), right.right, right.operator); },\n      peg$c15 = \"*\",\n      peg$c16 = peg$literalExpectation(\"*\", false),\n      peg$c17 = \"/\",\n      peg$c18 = peg$literalExpectation(\"/\", false),\n      peg$c19 = function(left, right) { return getOperation(getOperation(left, right.left, 'divide'), right.right, right.operator); },\n      peg$c20 = \"%\",\n      peg$c21 = peg$literalExpectation(\"%\", false),\n      peg$c22 = function(left, right) { return getOperation(getOperation(left, right.left, 'mod'), right.right, right.operator); },\n      peg$c23 = function(left, right) { return getOperation(left, right, 'multiply'); },\n      peg$c24 = function(left, right) { return getOperation(left, right, 'divide'); },\n      peg$c25 = function(left, right) { return getOperation(left, right, 'mod'); },\n      peg$c26 = function(left, right) { return {left: getOperation(left, right.left, 'multiply'), right: right.right, operator: right.operator}; },\n      peg$c27 = function(left, right) { return {left: getOperation(left, right.left, 'divide'), right: right.right, operator: right.operator}; },\n      peg$c28 = function(left, right) { return {left: getOperation(left, right.left, 'mod'), right: right.right, operator: right.operator}; },\n      peg$c29 = function(left, right) { return {left, right, operator: 'multiply'}; },\n      peg$c30 = function(left, right) { return {left, right, operator: 'divide'}; },\n      peg$c31 = function(left, right) { return {left, right, operator: 'mod'}; },\n      peg$c32 = \"^\",\n      peg$c33 = peg$literalExpectation(\"^\", false),\n      peg$c34 = \"**\",\n      peg$c35 = peg$literalExpectation(\"**\", false),\n      peg$c36 = function(left, right) { return getOperation(left, right, 'pow'); },\n      peg$c37 = function(parameter) { return getFunction('negate', [parameter], error); },\n      peg$c38 = \"(\",\n      peg$c39 = peg$literalExpectation(\"(\", false),\n      peg$c40 = \")\",\n      peg$c41 = peg$literalExpectation(\")\", false),\n      peg$c42 = function(result) { return result; },\n      peg$c43 = \"[\",\n      peg$c44 = peg$literalExpectation(\"[\", false),\n      peg$c45 = \"]\",\n      peg$c46 = peg$literalExpectation(\"]\", false),\n      peg$c47 = \"{\",\n      peg$c48 = peg$literalExpectation(\"{\", false),\n      peg$c49 = \"}\",\n      peg$c50 = peg$literalExpectation(\"}\", false),\n      peg$c51 = peg$otherExpectation(\"function\"),\n      peg$c52 = function(id, parameters) { return getFunction(id, parameters, error); },\n      peg$c53 = \",\",\n      peg$c54 = peg$literalExpectation(\",\", false),\n      peg$c55 = function(left, right) { return [left].concat(right); },\n      peg$c56 = function(result) { return [result]; },\n      peg$c57 = function(id) { return getValue(id, error); },\n      peg$c58 = peg$otherExpectation(\"identifier\"),\n      peg$c59 = /^[A-Za-z]/,\n      peg$c60 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"]], false, false),\n      peg$c61 = /^[A-Za-z0-9]/,\n      peg$c62 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"]], false, false),\n      peg$c63 = function() { return text(); },\n      peg$c64 = peg$otherExpectation(\"number\"),\n      peg$c65 = /^[Ee]/,\n      peg$c66 = peg$classExpectation([\"E\", \"e\"], false, false),\n      peg$c67 = /^[+\\-]/,\n      peg$c68 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c69 = function() { return new Complex.Cartesian(+text()); },\n      peg$c70 = \".\",\n      peg$c71 = peg$literalExpectation(\".\", false),\n      peg$c72 = /^[0-9]/,\n      peg$c73 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c74 = peg$otherExpectation(\"whitespace\"),\n      peg$c75 = /^[ \\t\\n\\r]/,\n      peg$c76 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parseExpression() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseShift();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c0); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseShift() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseScale();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s3 = peg$c2;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c3); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseNestedShift();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c4(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseScale();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s3 = peg$c5;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c6); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseNestedShift();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c7(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseScale();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s3 = peg$c2;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c3); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse_();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseScale();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c8(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseScale();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 45) {\n                s3 = peg$c5;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c6); }\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse_();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseScale();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c9(s1, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseScale();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseNestedShift() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseScale();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 43) {\n          s3 = peg$c2;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c3); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseNestedShift();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c10(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseScale();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s3 = peg$c5;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c6); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseNestedShift();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c11(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseScale();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s3 = peg$c2;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c3); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse_();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseScale();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c12(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseScale();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 45) {\n                s3 = peg$c5;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c6); }\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse_();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseScale();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c13(s1, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseScale() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsePowerNegate();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseNestedScale();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c14(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsePowerNegate();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 42) {\n            s3 = peg$c15;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c16); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseNestedScaleWithNegate();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c14(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsePowerNegate();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 47) {\n              s3 = peg$c17;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c18); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse_();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseNestedScaleWithNegate();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c19(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsePowerNegate();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 37) {\n                s3 = peg$c20;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c21); }\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse_();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseNestedScaleWithNegate();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c22(s1, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsePowerNegate();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse_();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parsePower();\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c23(s1, s3);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parsePowerNegate();\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parse_();\n                if (s2 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 42) {\n                    s3 = peg$c15;\n                    peg$currPos++;\n                  } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c16); }\n                  }\n                  if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                      s5 = peg$parsePowerNegate();\n                      if (s5 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c23(s1, s5);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsePowerNegate();\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$parse_();\n                  if (s2 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 47) {\n                      s3 = peg$c17;\n                      peg$currPos++;\n                    } else {\n                      s3 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c18); }\n                    }\n                    if (s3 !== peg$FAILED) {\n                      s4 = peg$parse_();\n                      if (s4 !== peg$FAILED) {\n                        s5 = peg$parsePowerNegate();\n                        if (s5 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c24(s1, s5);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parsePowerNegate();\n                  if (s1 !== peg$FAILED) {\n                    s2 = peg$parse_();\n                    if (s2 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 37) {\n                        s3 = peg$c20;\n                        peg$currPos++;\n                      } else {\n                        s3 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c21); }\n                      }\n                      if (s3 !== peg$FAILED) {\n                        s4 = peg$parse_();\n                        if (s4 !== peg$FAILED) {\n                          s5 = peg$parsePowerNegate();\n                          if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c25(s1, s5);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parsePowerNegate();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseNestedScaleWithNegate() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsePowerNegate();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseNestedScale();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c26(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsePowerNegate();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 42) {\n            s3 = peg$c15;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c16); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseNestedScaleWithNegate();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c26(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsePowerNegate();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 47) {\n              s3 = peg$c17;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c18); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse_();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseNestedScaleWithNegate();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c27(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsePowerNegate();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 37) {\n                s3 = peg$c20;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c21); }\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse_();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseNestedScaleWithNegate();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c28(s1, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsePowerNegate();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse_();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parsePower();\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c29(s1, s3);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parsePowerNegate();\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parse_();\n                if (s2 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 42) {\n                    s3 = peg$c15;\n                    peg$currPos++;\n                  } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c16); }\n                  }\n                  if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                      s5 = peg$parsePowerNegate();\n                      if (s5 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c29(s1, s5);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsePowerNegate();\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$parse_();\n                  if (s2 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 47) {\n                      s3 = peg$c17;\n                      peg$currPos++;\n                    } else {\n                      s3 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c18); }\n                    }\n                    if (s3 !== peg$FAILED) {\n                      s4 = peg$parse_();\n                      if (s4 !== peg$FAILED) {\n                        s5 = peg$parsePowerNegate();\n                        if (s5 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c30(s1, s5);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parsePowerNegate();\n                  if (s1 !== peg$FAILED) {\n                    s2 = peg$parse_();\n                    if (s2 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 37) {\n                        s3 = peg$c20;\n                        peg$currPos++;\n                      } else {\n                        s3 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c21); }\n                      }\n                      if (s3 !== peg$FAILED) {\n                        s4 = peg$parse_();\n                        if (s4 !== peg$FAILED) {\n                          s5 = peg$parsePowerNegate();\n                          if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c31(s1, s5);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseNestedScale() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsePower();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseNestedScale();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c26(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsePower();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 42) {\n            s3 = peg$c15;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c16); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseNestedScaleWithNegate();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c26(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsePower();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 47) {\n              s3 = peg$c17;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c18); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse_();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseNestedScaleWithNegate();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c27(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsePower();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 37) {\n                s3 = peg$c20;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c21); }\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse_();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseNestedScaleWithNegate();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c28(s1, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsePower();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse_();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parsePower();\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c29(s1, s3);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parsePower();\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parse_();\n                if (s2 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 42) {\n                    s3 = peg$c15;\n                    peg$currPos++;\n                  } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c16); }\n                  }\n                  if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                      s5 = peg$parsePowerNegate();\n                      if (s5 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c29(s1, s5);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsePower();\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$parse_();\n                  if (s2 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 47) {\n                      s3 = peg$c17;\n                      peg$currPos++;\n                    } else {\n                      s3 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c18); }\n                    }\n                    if (s3 !== peg$FAILED) {\n                      s4 = peg$parse_();\n                      if (s4 !== peg$FAILED) {\n                        s5 = peg$parsePowerNegate();\n                        if (s5 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c30(s1, s5);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parsePower();\n                  if (s1 !== peg$FAILED) {\n                    s2 = peg$parse_();\n                    if (s2 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 37) {\n                        s3 = peg$c20;\n                        peg$currPos++;\n                      } else {\n                        s3 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c21); }\n                      }\n                      if (s3 !== peg$FAILED) {\n                        s4 = peg$parse_();\n                        if (s4 !== peg$FAILED) {\n                          s5 = peg$parsePowerNegate();\n                          if (s5 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c31(s1, s5);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsePowerNegate() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseGroup();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 94) {\n          s3 = peg$c32;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c33); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c34) {\n            s3 = peg$c34;\n            peg$currPos += 2;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c35); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsePowerNegate();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c36(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s1 = peg$c5;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c6); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsePowerNegate();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c37(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseGroup();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsePower() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseGroup();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 94) {\n          s3 = peg$c32;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c33); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c34) {\n            s3 = peg$c34;\n            peg$currPos += 2;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c35); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsePower();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c36(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseGroup();\n    }\n\n    return s0;\n  }\n\n  function peg$parseNegate() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 45) {\n      s1 = peg$c5;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c6); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsePowerNegate();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c37(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseGroup();\n    }\n\n    return s0;\n  }\n\n  function peg$parseGroup() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s1 = peg$c38;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c39); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseShift();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s5 = peg$c40;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c41); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c42(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c43;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c44); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseShift();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 93) {\n                s5 = peg$c45;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c46); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c42(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 123) {\n          s1 = peg$c47;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c48); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseShift();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse_();\n              if (s4 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 125) {\n                  s5 = peg$c49;\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c50); }\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c42(s3);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseFunction();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseFunction() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseIdentifier();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c38;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c39); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseComma();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s7 = peg$c40;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c41); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c52(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseValue();\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c51); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseComma() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseShift();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s3 = peg$c53;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c54); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseComma();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c55(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseShift();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c56(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseValue() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseIdentifier();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c57(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseNumber();\n    }\n\n    return s0;\n  }\n\n  function peg$parseIdentifier() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    if (peg$c59.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c60); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c61.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c62); }\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        if (peg$c61.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c62); }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c63();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c58); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseNumber() {\n    var s0, s1, s2, s3, s4, s5;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parseFloat();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      if (peg$c65.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c66); }\n      }\n      if (s3 !== peg$FAILED) {\n        if (peg$c67.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c68); }\n        }\n        if (s4 === peg$FAILED) {\n          s4 = null;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseInteger();\n          if (s5 !== peg$FAILED) {\n            s3 = [s3, s4, s5];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c69();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c64); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseFloat() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseInteger();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s2 = peg$c70;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c71); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseInteger();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseInteger() {\n    var s0, s1;\n\n    s0 = [];\n    if (peg$c72.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c73); }\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c72.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c73); }\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1;\n\n    peg$silentFails++;\n    s0 = [];\n    if (peg$c75.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c76); }\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      if (peg$c75.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c76); }\n      }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c74); }\n    }\n\n    return s0;\n  }\n\n\r\n    const Complex = require('../src/complex');\r\n\r\n    function isComplex(parameter) {\r\n      return parameter instanceof Complex;\r\n    }\r\n\r\n    function cache(value) {\r\n      // look for index of exact match before caching new value\r\n      const index = options.cached.findIndex(cached => cached.equals(value, 0));\r\n\r\n      return isComplex(value) ? 'this[' + (index >= 0 ? index : options.cached.push(value) - 1) + ']' : value;\r\n    }\r\n\r\n    function getFunction(id, parameters, error) {\r\n      const name = id.toLowerCase();\r\n      const canEval = parameters.every(isComplex);\r\n\r\n      if (Complex.hasOwnProperty(name) && typeof Complex[name] === 'function' && name !== 'constructor') {\r\n        if (Complex[name].length === 1) {\r\n          const parameter = parameters[0];\r\n\r\n          return canEval ? parameter[name]() : parameter + '.' + name + '()';\r\n        }\r\n\r\n        return canEval ? Complex[name].apply(Complex, parameters) : 'Complex.' + name + '(' + parameters.map(cache).join() + ')';\r\n      }\r\n\r\n      error('Expected function but \\\"' + name + '\\\" found.');\r\n    }\r\n\r\n    function getValue(id, error) {\r\n      const name = id.toUpperCase();\r\n\r\n      if (options.parameters.indexOf(id) >= 0) {\r\n        return id;\r\n      } else if (Complex.hasOwnProperty(name) && isComplex(Complex[name])) {\r\n        return Complex[name];\r\n      }\r\n\r\n      error('Expected constant or parameter but \\\"' + id + '\\\" found.');\r\n    }\r\n\r\n    function getOperation(left, right, operand) {\r\n      if (isComplex(left) && isComplex(right)) {\r\n        return left[operand](right);\r\n      }\r\n\r\n      return cache(left) + '.' + operand + '(' + cache(right) + ')';\r\n    }\r\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","/* Copyright (c) 2017 Patrick Roberts */\r\n\r\n'use strict';\r\n\r\nconst utils = require('./utils');\r\n\r\nconst Cartesian = module.exports = function Cartesian(real = 0, imag = 0) {\r\n  if (!(this instanceof Cartesian)) {\r\n    return new Cartesian(real, imag);\r\n  }\r\n\r\n  this.real = real;\r\n  this.imag = imag;\r\n};\r\n\r\nconst mulDescriptor = utils.nonEnumerable(function multiply(that) {\r\n  return new Cartesian(\r\n    this.real * that.real - this.imag * that.imag,\r\n    this.imag * that.real + this.real * that.imag\r\n  );\r\n});\r\nconst divDescriptor = utils.nonEnumerable(function divide(that) {\r\n  return new Cartesian(\r\n    this.real / that.real + this.imag / that.imag,\r\n    this.imag / that.real - this.real / that.imag\r\n  );\r\n});\r\n\r\nCartesian.prototype = Object.create(require('./complex').prototype, {\r\n  constructor: utils.nonEnumerable(Cartesian),\r\n  abs: {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() {\r\n      return this.abs = Math.sqrt(this.real * this.real + this.imag * this.imag);\r\n    },\r\n    set(value) {\r\n      Object.defineProperty(this, 'abs', {\r\n        configurable: true,\r\n        enumerable: true,\r\n        value,\r\n        writable: true,\r\n      });\r\n\r\n      return value;\r\n    },\r\n  },\r\n  arg: {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() {\r\n      const arg = Math.atan2(this.imag, this.real);\r\n\r\n      return this.arg = arg !== 0 ? -((-arg + Math.PI) % (Math.PI * 2) - Math.PI) : 0;\r\n    },\r\n    set(value) {\r\n      Object.defineProperty(this, 'arg', {\r\n        configurable: true,\r\n        enumerable: true,\r\n        value,\r\n        writable: true,\r\n      });\r\n\r\n      return value;\r\n    },\r\n  },\r\n  multiply: mulDescriptor,\r\n  times:    mulDescriptor,\r\n  mul:      mulDescriptor,\r\n  '*':      mulDescriptor,\r\n  divide:   divDescriptor,\r\n  div:      divDescriptor,\r\n  '/':      divDescriptor,\r\n  isFinite: utils.nonEnumerable(function isFinite() {\r\n    return utils.isFinite(this.real) && utils.isFinite(this.imag);\r\n  }),\r\n  isNaN: utils.nonEnumerable(function isNaN() {\r\n    return utils.isNaN(this.real) || utils.isNaN(this.imag);\r\n  }),\r\n  negate: utils.nonEnumerable(function negate() {\r\n    return new Cartesian(-this.real, -this.imag);\r\n  }),\r\n  conjugate: utils.nonEnumerable(function conjugate() {\r\n    return new Cartesian(this.real, -this.imag);\r\n  }),\r\n  normalize: utils.nonEnumerable(function normalize() {\r\n    return new Cartesian(this.real / this.abs, this.imag / this.abs);\r\n  }),\r\n  square: utils.nonEnumerable(function square() {\r\n    return new Cartesian(\r\n      this.real * this.real - this.imag * this.imag,\r\n      this.real * this.imag * 2\r\n    );\r\n  }),\r\n  cube: utils.nonEnumerable(function cube() {\r\n    return new Cartesian(\r\n      this.real * (this.real * this.real - this.imag * this.imag * 3),\r\n      this.imag * (this.real * this.real * 3 - this.imag * this.imag)\r\n    );\r\n  }),\r\n});\r\n","/* Copyright (c) 2017 Patrick Roberts */\r\n\r\n'use strict';\r\n\r\nconst parser = require('../parser');\r\nconst utils = require('./utils');\r\n\r\nif (Math.sinh === undefined) {\r\n  Math.sinh = function sinh(number = NaN) {\r\n    const exp = Math.exp(number);\r\n\r\n    return (exp - 1) / exp / 2;\r\n  };\r\n}\r\n\r\nif (Math.cosh === undefined) {\r\n  Math.cosh = function cosh(number = NaN) {\r\n    const exp = Math.exp(number);\r\n\r\n    return (exp + 1) / exp / 2;\r\n  };\r\n}\r\n\r\nif (Number.EPSILON === undefined) {\r\n  Number.EPSILON = 2.220446049250313e-16;\r\n}\r\n\r\nconst Complex = module.exports = class Complex {\r\n  // polymorphic static calls to inherited member methods\r\n  static isFinite(complex) {\r\n    return complex.isFinite();\r\n  }\r\n\r\n  static isNaN(complex) {\r\n    return complex.isNaN();\r\n  }\r\n\r\n  static isReal(complex) {\r\n    return complex.isReal();\r\n  }\r\n\r\n  static isImag(complex) {\r\n    return complex.isImag();\r\n  }\r\n\r\n  static negate(complex) {\r\n    return complex.negate();\r\n  }\r\n\r\n  static conjugate(complex) {\r\n    return complex.conjugate();\r\n  }\r\n\r\n  static normalize(complex) {\r\n    return complex.normalize();\r\n  }\r\n\r\n  static square(complex) {\r\n    return complex.square();\r\n  }\r\n\r\n  static cube(complex) {\r\n    return complex.cube();\r\n  }\r\n\r\n  // static methods\r\n  static sign(complex) {\r\n    return new Cartesian(utils.sign(complex.real), utils.sign(complex.imag));\r\n  }\r\n\r\n  static floor(complex) {\r\n    return new Cartesian(utils.floor(complex.real), utils.floor(complex.imag));\r\n  }\r\n\r\n  static ceil(complex) {\r\n    return new Cartesian(utils.ceil(complex.real), utils.ceil(complex.imag));\r\n  }\r\n\r\n  static round(complex) {\r\n    return new Cartesian(utils.round(complex.real), utils.round(complex.imag));\r\n  }\r\n\r\n  static truncate(complex) {\r\n    return new Cartesian(utils.truncate(complex.real), utils.truncate(complex.imag));\r\n  }\r\n\r\n  static fraction(complex) {\r\n    return new Cartesian(complex.real % 1, complex.imag % 1);\r\n  }\r\n\r\n  static sqrt(complex) {\r\n    return new Polar(\r\n      complex.abs ** 0.5,\r\n      complex.arg * 0.5\r\n    );\r\n  }\r\n\r\n  static cbrt(complex) {\r\n    return new Polar(\r\n      complex.abs ** (1/3),\r\n      complex.arg / 3\r\n    );\r\n  }\r\n\r\n  static exp(complex) {\r\n    return new Polar(\r\n      Math.exp(complex.real),\r\n      complex.imag\r\n    );\r\n  }\r\n\r\n  static log(complex) {\r\n    return new Cartesian(\r\n      Math.log(complex.abs),\r\n      complex.arg\r\n    );\r\n  }\r\n\r\n  static cos(complex) {\r\n    return new Cartesian(\r\n      Math.cos(complex.real) * Math.cosh(complex.imag),\r\n      -Math.sin(complex.real) * Math.sinh(complex.imag)\r\n    );\r\n  }\r\n\r\n  static sin(complex) {\r\n    return new Cartesian(\r\n      Math.sin(complex.real) * Math.cosh(complex.imag),\r\n      Math.cos(complex.real) * Math.sinh(complex.imag)\r\n    );\r\n  }\r\n\r\n  static tan(complex) {\r\n    const real2 = complex.real * 2;\r\n    const imag2 = complex.imag * 2;\r\n    const denom = Math.cos(real2) + Math.cosh(imag2);\r\n\r\n    return new Cartesian(\r\n      Math.sin(real2) / denom,\r\n      Math.sinh(imag2) / denom\r\n    );\r\n  }\r\n\r\n  static sec(complex) {\r\n    const denom = Math.cos(complex.real * 2) + Math.cosh(complex.imag * 2);\r\n\r\n    return new Cartesian(\r\n      Math.cos(complex.real) * Math.cosh(complex.imag) * 2 / denom,\r\n      Math.sin(complex.real) * Math.sinh(complex.real) * 2 / denom\r\n    );\r\n  }\r\n\r\n  static csc(complex) {\r\n    const denom = Math.cos(complex.real * 2) - Math.cosh(complex.imag * 2);\r\n\r\n    return new Cartesian(\r\n      -Math.sin(complex.real) * Math.cosh(complex.imag) * 2 / denom,\r\n      Math.cos(complex.real) * Math.sinh(complex.imag) * 2 / denom\r\n    );\r\n  }\r\n\r\n  static cot(complex) {\r\n    const real2 = complex.real * 2;\r\n    const imag2 = complex.imag * 2;\r\n    const denom = Math.cos(real2) - Math.cosh(imag2);\r\n\r\n    return new Cartesian(\r\n      -Math.sin(real2) / denom,\r\n      Math.sinh(imag2) / denom\r\n    );\r\n  }\r\n\r\n  static cosh(complex) {\r\n    return new Cartesian(\r\n      Math.cosh(complex.real) * Math.cos(complex.imag),\r\n      Math.sinh(complex.real) * Math.sin(complex.imag)\r\n    );\r\n  }\r\n\r\n  static sinh(complex) {\r\n    return new Cartesian(\r\n      Math.sinh(complex.real) * Math.cos(complex.imag),\r\n      Math.cosh(complex.real) * Math.sin(complex.imag)\r\n    );\r\n  }\r\n\r\n  static tanh(complex) {\r\n    const real2 = complex.real * 2;\r\n    const imag2 = complex.imag * 2;\r\n    const denom = Math.cosh(real2) + Math.cos(imag2);\r\n\r\n    return new Cartesian(\r\n      Math.sinh(real2) / denom,\r\n      Math.sin(imag2) / denom\r\n    );\r\n  }\r\n\r\n  static sech(complex) {\r\n    const denom = Math.cosh(complex.real * 2) + Math.cos(complex.imag * 2);\r\n\r\n    return new Cartesian(\r\n      Math.cosh(complex.real) * Math.cos(complex.imag) * 2 / denom,\r\n      -Math.sinh(complex.real) * Math.sin(complex.real) * 2 / denom\r\n    );\r\n  }\r\n\r\n  static csch(complex) {\r\n    const denom = Math.cos(complex.imag * 2) - Math.cosh(complex.real * 2);\r\n\r\n    return new Cartesian(\r\n      -Math.sinh(complex.real) * Math.cos(complex.imag) * 2 / denom,\r\n      Math.cosh(complex.real) * Math.sin(complex.imag) * 2 / denom\r\n    );\r\n  }\r\n\r\n  static coth(complex) {\r\n    const real2 = complex.real * 2;\r\n    const imag2 = complex.imag * 2;\r\n    const denom = Math.cos(imag2) - Math.cosh(real2);\r\n\r\n    return new Cartesian(\r\n      -Math.sinh(real2) / denom,\r\n      Math.sin(imag2) / denom\r\n    );\r\n  }\r\n\r\n  static acos(complex) {\r\n    // -i log(z+sqrt(z^2-1))\r\n    return Complex.NEG_I.multiply(Complex.log(Complex.sqrt(Complex.square(complex).sub(Complex.ONE)).add(complex)));\r\n  }\r\n\r\n  static asin(complex) {\r\n    // -i log(iz+sqrt(1-z^2))\r\n    return Complex.NEG_I.multiply(Complex.log(Complex.sqrt(Complex.ONE.sub(Complex.square(complex))).add(complex.multiply(Complex.I))));\r\n  }\r\n\r\n  static atan(complex) {\r\n    const iz = Complex.I.multiply(complex);\r\n    // i/2 (log(1-iz)-log(1+iz))\r\n    return iz.negate().add(Complex.ONE).log().sub(iz.add(Complex.ONE).log()).divide(Complex.TWO_I);\r\n  }\r\n\r\n  static asec(complex) {\r\n    return Complex.ONE.divide(complex).acos();\r\n  }\r\n\r\n  static acsc(complex) {\r\n    return Complex.ONE.divide(complex).asin();\r\n  }\r\n\r\n  static acot(complex) {\r\n    const idz = Complex.I.divide(complex);\r\n    // i/2 (log(1-i/z)-log(1+i/z))\r\n    return iz.negate().add(Complex.ONE).log().sub(iz.add(Complex.ONE).log()).divide(Complex.TWO_I);\r\n  }\r\n\r\n  static acosh(complex) {\r\n    // log(z+sqrt(z^2-1))\r\n    return complex.square().sub(Complex.ONE).sqrt().add(complex).log();\r\n  }\r\n\r\n  static asinh(complex) {\r\n    // log(z+sqrt(z^2+1))\r\n    return complex.square().add(Complex.ONE).sqrt().add(complex).log();\r\n  }\r\n\r\n  static atanh(complex) {\r\n    // log((1+z)/(1-z))/2\r\n    return complex.add(Complex.ONE).divide(complex.negate().add(Complex.ONE)).log().divide(Complex.TWO);\r\n  }\r\n\r\n  static asech(complex) {\r\n    return Complex.ONE.divide(complex).acosh();\r\n  }\r\n\r\n  static acsch(complex) {\r\n    return Complex.ONE.divide(complex).asinh();\r\n  }\r\n\r\n  static acoth(complex) {\r\n    // log((z+1)/(z-1))/2\r\n    return complex.add(Complex.ONE).divide(complex.sub(Complex.ONE)).log().divide(Complex.TWO);\r\n  }\r\n\r\n  static min() {\r\n    var minimum = new Complex(Infinity, 0, Infinity, 0);\r\n\r\n    for (var index = 0; index < arguments.length; index++) {\r\n      if (arguments[index].abs < minimum.abs) {\r\n        minimum = arguments[index];\r\n      }\r\n    }\r\n\r\n    return minimum;\r\n  }\r\n\r\n  static max() {\r\n    var maximum = Complex.ZERO;\r\n\r\n    for (var index = 0; index < arguments.length; index++) {\r\n      if (arguments[index].abs > maximum.abs) {\r\n        maximum = arguments[index];\r\n      }\r\n    }\r\n\r\n    return maximum;\r\n  }\r\n\r\n  static compile(string, parameters = []) {\r\n    const cached = [];\r\n    const result = parser.parse(string, {parameters, cached});\r\n\r\n    parameters.unshift('Complex');\r\n\r\n    return new Function(parameters.join(), 'return ' + result).bind(cached, Complex);\r\n  }\r\n\r\n  constructor(real = 0, imag = 0, abs = Math.sqrt(real * real + imag * imag), arg = Math.atan2(imag, real)) {\r\n    if (!(this instanceof Complex)) {\r\n      return new Complex(real, imag, abs, arg);\r\n    }\r\n\r\n    this.real = real;\r\n    this.imag = imag;\r\n    this.abs  = abs >= 0 ? abs : -abs;\r\n    this.arg  = arg !== 0 ? -((-arg + (abs >= 0 ? Math.PI : 0)) % (Math.PI * 2) - Math.PI) : abs < 0 ? Math.PI : 0;\r\n  }\r\n\r\n  // member methods\r\n  toString(polar) {\r\n    let string = '';\r\n\r\n    if (!polar) {\r\n      const real = this.real.toPrecision();\r\n      const imag = this.imag.toPrecision();\r\n\r\n      if (this.real !== 0 || this.imag === 0) {\r\n        string += real;\r\n      }\r\n\r\n      if (this.imag !== 0) {\r\n        if (this.real !== 0 && this.imag > 0) {\r\n          string += '+';\r\n        }\r\n\r\n        string += this.imag === 1 ? 'i' : this.imag === -1 ? '-i' : imag + '*i';\r\n      }\r\n    } else {\r\n      const abs = this.abs.toPrecision();\r\n      const arg = this.arg.toPrecision();\r\n\r\n      string = abs;\r\n\r\n      if (this.abs !== 0 && this.arg !== 0) {\r\n        string += `*e^(${arg}*i)`;\r\n      }\r\n    }\r\n\r\n    return string;\r\n  }\r\n\r\n  equals(that, maxUlps = 4) {\r\n    return (\r\n      Long.withinMaxUlps(this.real, that.real, maxUlps) && Long.withinMaxUlps(this.imag, that.imag, maxUlps) ||\r\n      Long.withinMaxUlps(this.abs, that.abs, maxUlps) && Long.withinMaxUlps(this.arg, that.arg, maxUlps)\r\n    );\r\n  }\r\n\r\n  add(that) {\r\n    return new Cartesian(this.real + that.real, this.imag + that.imag);\r\n  }\r\n\r\n  subtract(that) {\r\n    return new Cartesian(this.real - that.real, this.imag - that.imag);\r\n  }\r\n\r\n  multiply(that) {\r\n    return new Complex(\r\n      this.real * that.real - this.imag * that.imag,\r\n      this.imag * that.real + this.real * that.imag,\r\n      this.abs * that.abs, this.arg + that.arg\r\n    );\r\n  }\r\n\r\n  divide(that) {\r\n    return new Complex(\r\n      this.real / that.real + this.imag / that.imag,\r\n      this.imag / that.real - this.real / that.imag,\r\n      this.abs / that.abs, this.arg - that.arg\r\n    );\r\n  }\r\n\r\n  modulo(that) {\r\n    return new Cartesian(this.real % that.real, this.imag % that.imag);\r\n  }\r\n\r\n  power(that) {\r\n    return new Polar(\r\n      (this.abs ** that.real) * Math.exp(-that.imag * this.arg),\r\n      that.imag * Math.log(this.abs) + that.real * this.arg\r\n    );\r\n  }\r\n\r\n  // member methods for static functions\r\n  isFinite() {\r\n    return utils.isFinite(this.abs);\r\n  }\r\n\r\n  isNaN() {\r\n    return utils.isNaN(this.abs) || utils.isNaN(this.arg);\r\n  }\r\n\r\n  isReal() {\r\n    return (\r\n      this.imag <= Number.EPSILON && this.imag >= Number.EPSILON ||\r\n      this.arg <= Number.EPSILON && this.arg >= Number.EPSILON ||\r\n      Long.withinMaxUlps(this.arg, Math.PI)\r\n    );\r\n  }\r\n\r\n  isImag() {\r\n    return (\r\n      this.real <= Number.EPSILON && this.real >= Number.EPSILON ||\r\n      Long.withinMaxUlps(this.arg < 0 ? -this.arg : this.arg, Math.PI / 2)\r\n    );\r\n  }\r\n\r\n  negate() {\r\n    return new Complex(-this.real, -this.imag, -this.abs, this.arg);\r\n  }\r\n\r\n  conjugate() {\r\n    return new Complex(this.real, -this,imag, this.abs, -this.arg);\r\n  }\r\n\r\n  normalize() {\r\n    return new Complex(\r\n      this.real / this.abs,\r\n      this.imag / this.abs,\r\n      this.abs / this.abs,\r\n      this.arg\r\n    );\r\n  }\r\n\r\n  square() {\r\n    return new Complex(\r\n      this.real * this.real - this.imag * this.imag,\r\n      this.real * this.imag * 2,\r\n      this.abs * this.abs,\r\n      this.arg * 2\r\n    );\r\n  }\r\n\r\n  cube() {\r\n    return new Complex(\r\n      this.real * (this.real * this.real - this.imag * this.imag * 3),\r\n      this.imag * (this.real * this.real * 3 - this.imag * this.imag),\r\n      this.abs * this.abs * this.abs, this.arg * 3\r\n    );\r\n  }\r\n\r\n  sign() {\r\n    return new Cartesian(utils.sign(this.real), utils.sign(this.imag));\r\n  }\r\n\r\n  floor() {\r\n    return new Cartesian(utils.floor(this.real), utils.floor(this.imag));\r\n  }\r\n\r\n  ceil() {\r\n    return new Cartesian(utils.ceil(this.real), utils.ceil(this.imag));\r\n  }\r\n\r\n  round() {\r\n    return new Cartesian(utils.round(this.real), utils.round(this.imag));\r\n  }\r\n\r\n  truncate() {\r\n    return new Cartesian(utils.truncate(this.real), utils.truncate(this.imag));\r\n  }\r\n\r\n  fraction() {\r\n    return new Cartesian(utils.remainder(this.real), utils.remainder(this.imag));\r\n  }\r\n\r\n  sqrt() {\r\n    return new Polar(\r\n      this.abs ** 0.5,\r\n      this.arg * 0.5\r\n    );\r\n  }\r\n\r\n  cbrt() {\r\n    return new Polar(\r\n      this.abs ** (1/3),\r\n      this.arg / 3\r\n    );\r\n  }\r\n\r\n  exp() {\r\n    return new Polar(\r\n      Math.exp(this.real),\r\n      this.imag\r\n    );\r\n  }\r\n\r\n  log() {\r\n    return new Cartesian(\r\n      Math.log(this.abs),\r\n      this.arg\r\n    );\r\n  }\r\n\r\n  cos() {\r\n    return new Cartesian(\r\n      Math.cos(this.real) * Math.cosh(this.imag),\r\n      -Math.sin(this.real) * Math.sinh(this.imag)\r\n    );\r\n  }\r\n\r\n  sin() {\r\n    return new Cartesian(\r\n      Math.sin(this.real) * Math.cosh(this.imag),\r\n      Math.cos(this.real) * Math.sinh(this.imag)\r\n    );\r\n  }\r\n\r\n  tan() {\r\n    const real2 = this.real * 2;\r\n    const imag2 = this.imag * 2;\r\n    const denom = Math.cos(real2) + Math.cosh(imag2);\r\n\r\n    return new Cartesian(\r\n      Math.sin(real2) / denom,\r\n      Math.sinh(imag2) / denom\r\n    );\r\n  }\r\n\r\n  sec() {\r\n    const denom = Math.cos(this.real * 2) + Math.cosh(this.imag * 2);\r\n\r\n    return new Cartesian(\r\n      Math.cos(this.real) * Math.cosh(this.imag) * 2 / denom,\r\n      Math.sin(this.real) * Math.sinh(this.real) * 2 / denom\r\n    );\r\n  }\r\n\r\n  csc() {\r\n    const denom = Math.cos(this.real * 2) - Math.cosh(this.imag * 2);\r\n\r\n    return new Cartesian(\r\n      -Math.sin(this.real) * Math.cosh(this.imag) * 2 / denom,\r\n      Math.cos(this.real) * Math.sinh(this.imag) * 2 / denom\r\n    );\r\n  }\r\n\r\n  cot() {\r\n    const real2 = this.real * 2;\r\n    const imag2 = this.imag * 2;\r\n    const denom = Math.cos(real2) - Math.cosh(imag2);\r\n\r\n    return new Cartesian(\r\n      -Math.sin(real2) / denom,\r\n      Math.sinh(imag2) / denom\r\n    );\r\n  }\r\n\r\n  cosh() {\r\n    return new Cartesian(\r\n      Math.cosh(this.real) * Math.cos(this.imag),\r\n      Math.sinh(this.real) * Math.sin(this.imag)\r\n    );\r\n  }\r\n\r\n  sinh() {\r\n    return new Cartesian(\r\n      Math.sinh(this.real) * Math.cos(this.imag),\r\n      Math.cosh(this.real) * Math.sin(this.imag)\r\n    );\r\n  }\r\n\r\n  tanh() {\r\n    const real2 = this.real * 2;\r\n    const imag2 = this.imag * 2;\r\n    const denom = Math.cosh(real2) + Math.cos(imag2);\r\n\r\n    return new Cartesian(\r\n      Math.sinh(real2) / denom,\r\n      Math.sin(imag2) / denom\r\n    );\r\n  }\r\n\r\n  sech() {\r\n    const denom = Math.cosh(this.real * 2) + Math.cos(this.imag * 2);\r\n\r\n    return new Cartesian(\r\n      Math.cosh(this.real) * Math.cos(this.imag) * 2 / denom,\r\n      -Math.sinh(this.real) * Math.sin(this.real) * 2 / denom\r\n    );\r\n  }\r\n\r\n  csch() {\r\n    const denom = Math.cos(this.imag * 2) - Math.cosh(this.real * 2);\r\n\r\n    return new Cartesian(\r\n      -Math.sinh(this.real) * Math.cos(this.imag) * 2 / denom,\r\n      Math.cosh(this.real) * Math.sin(this.imag) * 2 / denom\r\n    );\r\n  }\r\n\r\n  coth() {\r\n    const real2 = this.real * 2;\r\n    const imag2 = this.imag * 2;\r\n    const denom = Math.cos(imag2) - Math.cosh(real2);\r\n\r\n    return new Cartesian(\r\n      -Math.sinh(real2) / denom,\r\n      Math.sin(imag2) / denom\r\n    );\r\n  }\r\n\r\n  acos() {\r\n    // -i log(z+sqrt(z^2-1))\r\n    return this.square().sub(Complex.ONE).sqrt().add(this).log().multiply(Complex.NEG_I);\r\n  }\r\n\r\n  asin() {\r\n    // -i log(iz+sqrt(1-z^2))\r\n    return Complex.ONE.sub(this.square()).sqrt().add(this.multiply(Complex.I)).log().multiply(Complex.NEG_I);\r\n  }\r\n\r\n  atan() {\r\n    const iz = this.multiply(Complex.I);\r\n    // i/2 (log(1-iz)-log(1+iz))\r\n    return iz.negate().add(Complex.ONE).log().sub(iz.add(Complex.ONE).log()).divide(Complex.TWO_I);\r\n  }\r\n\r\n  asec() {\r\n    return Complex.ONE.divide(this).acos();\r\n  }\r\n\r\n  acsc() {\r\n    return Complex.ONE.divide(this).asin();\r\n  }\r\n\r\n  acot() {\r\n    const idz = Complex.I.divide(this);\r\n    // i/2 (log(1-i/z)-log(1+i/z))\r\n    return idz.negate().add(Complex.ONE).log().sub(idz.add(Complex.ONE).log()).divide(Complex.TWO_I);\r\n  }\r\n\r\n  acosh() {\r\n    // log(z+sqrt(z^2-1))\r\n    return this.square().sub(Complex.ONE).sqrt().add(this).log();\r\n  }\r\n\r\n  asinh() {\r\n    // log(z+sqrt(z^2+1))\r\n    return this.square().add(Complex.ONE).sqrt().add(this).log();\r\n  }\r\n\r\n  atanh() {\r\n    // log((1+z)/(1-z))/2\r\n    return this.add(Complex.ONE).divide(this.negate().add(Complex.ONE)).log().divide(Complex.TWO);\r\n  }\r\n\r\n  asech() {\r\n    return Complex.ONE.divide(this).acosh();\r\n  }\r\n\r\n  acsch() {\r\n    return Complex.ONE.divide(this).asinh();\r\n  }\r\n\r\n  acoth() {\r\n    // log((z+1)/(z-1))/2\r\n    return this.add(Complex.ONE).divide(this.sub(Complex.ONE)).log().divide(Complex.TWO);\r\n  }\r\n}\r\n\r\nconst Cartesian = require('./cartesian');\r\nconst Polar = require('./polar');\r\nconst Long = require('./long');\r\n\r\nObject.defineProperties(Complex, {\r\n  Cartesian: utils.nonEnumerable(Cartesian),\r\n  Polar:     utils.nonEnumerable(Polar),\r\n  ZERO:      utils.nonEnumerable(new Complex(0, 0, 0, 0)),\r\n  ONE:       utils.nonEnumerable(new Complex(1, 0, 1, 0)),\r\n  NEG_ONE:   utils.nonEnumerable(new Complex(-1, 0, 1, Math.PI)),\r\n  I:         utils.nonEnumerable(new Complex(0, 1, 1, Math.PI / 2)),\r\n  NEG_I:     utils.nonEnumerable(new Complex(0, -1, 1, -Math.PI / 2)),\r\n  TWO:       utils.nonEnumerable(new Complex(2, 0, 2, 0)),\r\n  TWO_I:     utils.nonEnumerable(new Complex(0, 2, 2, Math.PI / 2)),\r\n  PI:        utils.nonEnumerable(new Complex(Math.PI, 0, Math.PI, 0)),\r\n  E:         utils.nonEnumerable(new Complex(Math.E, 0, Math.E, 0)),\r\n});\r\n\r\nconst equDescriptor = utils.nonEnumerable(Complex.prototype.equals);\r\nconst addDescriptor = utils.nonEnumerable(Complex.prototype.add);\r\nconst subDescriptor = utils.nonEnumerable(Complex.prototype.subtract);\r\nconst mulDescriptor = utils.nonEnumerable(Complex.prototype.multiply);\r\nconst divDescriptor = utils.nonEnumerable(Complex.prototype.divide);\r\nconst modDescriptor = utils.nonEnumerable(Complex.prototype.modulo);\r\nconst powDescriptor = utils.nonEnumerable(Complex.prototype.power);\r\n\r\nObject.defineProperties(Complex.prototype, {\r\n  equ:   equDescriptor,\r\n  '=':   equDescriptor,\r\n  plus:  addDescriptor,\r\n  '+':   addDescriptor,\r\n  minus: subDescriptor,\r\n  sub:   subDescriptor,\r\n  '-':   subDescriptor,\r\n  times: mulDescriptor,\r\n  mul:   mulDescriptor,\r\n  '*':   mulDescriptor,\r\n  div:   divDescriptor,\r\n  '/':   divDescriptor,\r\n  mod:   modDescriptor,\r\n  '%':   modDescriptor,\r\n  pow:   powDescriptor,\r\n  '^':   powDescriptor,\r\n  '**':  powDescriptor,\r\n});\r\n","/* Copyright (c) 2017 Patrick Roberts */\r\n\r\n'use strict';\r\n\r\nconst utils = require('./utils');\r\n\r\nconst Long = module.exports = class Long {\r\n  // bound float64Array and uint16Array\r\n  // access same arrayBuffer\r\n  static fromFloat64(float64Array, uint16Array, value) {\r\n    // protects against -0\r\n    float64Array[0] = value === 0 ? 0 : value;\r\n\r\n    // little endian encoding assumed\r\n    return new Long(uint16Array[3], uint16Array[2], uint16Array[1], uint16Array[0]);\r\n  }\r\n\r\n  static withinMaxUlps(a, b, maxUlps = 4) {\r\n    // covers +-Infinity and NaN\r\n    if (!utils.isFinite(a) || !utils.isFinite(b)) {\r\n      return +a === +b;\r\n    }\r\n\r\n    const {hi, lo} = Long.fromFloat64(+a).sub(Long.fromFloat64(+b));\r\n\r\n    return hi === 0 && lo <= maxUlps || ~hi === 0 && ~lo <= maxUlps;\r\n  }\r\n\r\n  constructor(u48, u32, u16, u00) {\r\n    this.u48 = u48;\r\n    this.u32 = u32;\r\n    this.u16 = u16;\r\n    this.u00 = u00;\r\n  }\r\n\r\n  get hi() {\r\n    return (this.u48 << 16) | this.u32;\r\n  }\r\n\r\n  get lo() {\r\n    return (this.u16 << 16) | this.u00;\r\n  }\r\n\r\n  set hi(int32) {\r\n    this.u48 = int32 >> 16;\r\n    this.u32 = int32 & 0xFFFF;\r\n\r\n    return this.hi;\r\n  }\r\n\r\n  set lo(int32) {\r\n    this.u16 = int32 >> 16;\r\n    this.u00 = int32 & 0xFFFF;\r\n\r\n    return this.lo;\r\n  }\r\n\r\n  negate() {\r\n    this.hi = ~this.hi;\r\n    this.lo = ~this.lo;\r\n\r\n    return this;\r\n  }\r\n\r\n  add(that) {\r\n    let u48, u32, u16, u00;\r\n\r\n    u00 = this.u00 + that.u00;\r\n    u16 = u00 >>> 16;\r\n    u00 &= 0xFFFF;\r\n    u16 += this.u16 + that.u16;\r\n    u32 = u16 >>> 16;\r\n    u16 &= 0xFFFF;\r\n    u32 += this.u32 + that.u32;\r\n    u48 = u32 >>> 16;\r\n    u32 &= 0xFFFF;\r\n    u48 += this.u48 + that.u48;\r\n    u48 &= 0xFFFF;\r\n\r\n    this.u48 = u48;\r\n    this.u32 = u32;\r\n    this.u16 = u16;\r\n    this.u00 = u00;\r\n\r\n    return this;\r\n  }\r\n\r\n  sub(that) {\r\n    return this.add(that.negate().add(Long.ONE));\r\n  }\r\n}\r\n\r\nLong.ONE = new Long(0x0000, 0x0000, 0x0000, 0x0001);\r\n\r\nconst arrayBuffer = new ArrayBuffer(8);\r\n\r\nObject.defineProperty(Long, 'fromFloat64', utils.nonEnumerable(\r\n    Long.fromFloat64.bind(Long, new Float64Array(arrayBuffer), new Uint16Array(arrayBuffer))\r\n  )\r\n);\r\n","/* Copyright (c) 2017 Patrick Roberts */\r\n\r\n'use strict';\r\n\r\nconst nonEnumerable = require('./utils').nonEnumerable;\r\nconst Long = require('./long');\r\n\r\nconst Polar = module.exports = function Polar(abs = 0, arg = 0) {\r\n  if (!(this instanceof Polar)) {\r\n    return new Polar(abs, arg);\r\n  }\r\n\r\n  this.abs = abs >= 0 ? abs : -abs;\r\n  this.arg = arg !== 0 ? -((-arg + (abs >= 0 ? Math.PI : 0)) % (Math.PI * 2) - Math.PI) : abs < 0 ? Math.PI : 0;\r\n};\r\n\r\nconst equDescriptor = nonEnumerable(function equals(that, maxUlps = 4) {\r\n  return (\r\n    Long.withinMaxUlps(this.abs, that.abs, maxUlps) && Long.withinMaxUlps(this.arg, that.arg, maxUlps) ||\r\n    Long.withinMaxUlps(this.real, that.real, maxUlps) && Long.withinMaxUlps(this.imag, that.imag, maxUlps)\r\n  );\r\n});\r\nconst mulDescriptor = nonEnumerable(function multiply(that) {\r\n  return new Polar(this.abs * that.abs, this.arg + that.arg);\r\n});\r\nconst divDescriptor = nonEnumerable(function divide(that) {\r\n  return new Polar(this.abs / that.abs, this.arg - that.arg);\r\n});\r\n\r\nPolar.prototype = Object.create(require('./complex').prototype, {\r\n  constructor: nonEnumerable(Polar),\r\n  real: {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() {\r\n      return this.real = this.abs * Math.cos(this.arg);\r\n    },\r\n    set(value) {\r\n      Object.defineProperty(this, 'real', {\r\n        configurable: true,\r\n        enumerable: true,\r\n        value,\r\n        writable: true,\r\n      });\r\n\r\n      return value;\r\n    },\r\n  },\r\n  imag: {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get() {\r\n      return this.imag = this.abs * Math.sin(this.arg);\r\n    },\r\n    set(value) {\r\n      Object.defineProperty(this, 'imag', {\r\n        configurable: true,\r\n        enumerable: true,\r\n        value,\r\n        writable: true,\r\n      });\r\n\r\n      return value;\r\n    },\r\n  },\r\n  equals:   equDescriptor,\r\n  equ:      equDescriptor,\r\n  '=':      equDescriptor,\r\n  multiply: mulDescriptor,\r\n  times:    mulDescriptor,\r\n  mul:      mulDescriptor,\r\n  '*':      mulDescriptor,\r\n  divide:   divDescriptor,\r\n  div:      divDescriptor,\r\n  '/':      divDescriptor,\r\n  isReal: nonEnumerable(function isReal() {\r\n    return (\r\n      this.arg <= Number.EPSILON && this.arg >= Number.EPSILON ||\r\n      Long.withinMaxUlps(this.arg, Math.PI) ||\r\n      this.imag <= Number.EPSILON && this.imag >= Number.EPSILON\r\n    );\r\n  }),\r\n  isImag: nonEnumerable(function isImag() {\r\n    return (\r\n      Long.withinMaxUlps(this.arg < 0 ? -this.arg : this.arg, Math.PI / 2) ||\r\n      this.real <= Number.EPSILON && this.real >= Number.EPSILON\r\n    );\r\n  }),\r\n  negate: nonEnumerable(function negate() {\r\n    return new Polar(-this.abs, this.arg);\r\n  }),\r\n  conjugate: nonEnumerable(function conjugate() {\r\n    return new Polar(this.abs, -this.arg);\r\n  }),\r\n  normalize: nonEnumerable(function normalize() {\r\n    return new Polar(this.abs / this.abs, this.arg);\r\n  }),\r\n  square: nonEnumerable(function square() {\r\n    return new Polar(this.abs * this.abs, this.arg * 2);\r\n  }),\r\n  cube: nonEnumerable(function cube() {\r\n    return new Polar(this.abs * this.abs * this.abs, this.arg * 3);\r\n  }),\r\n});\r\n","/* Copyright (c) 2017 Patrick Roberts */\r\n\r\n'use strict';\r\n\r\nmodule.exports = {\r\n  nonEnumerable(value) {\r\n    return {\r\n      configurable: true,\r\n      enumerable: false,\r\n      value,\r\n      writable: true,\r\n    };\r\n  },\r\n  isFinite: global.isFinite || function isFinite(number) {\r\n    return +number < Infinity && -number > Infinity;\r\n  },\r\n  isNaN: global.isNaN || function isNaN(number) {\r\n    number = +number;\r\n\r\n    return value !== value;\r\n  },\r\n  sign: Math.sign || function sign(number = NaN) {\r\n    return number > 0 ? 1 : number < 0 ? -1 : number == 0 ? 0 : NaN;\r\n  },\r\n  floor: Math.floor || function floor(number = NaN) {\r\n    const remainder = number % 1;\r\n\r\n    return remainder >= 0 ? number - remainder : number - (1 - remainder) % 1;\r\n  },\r\n  ceil: Math.ceil || function ceil(number = NaN) {\r\n    const remainder = number % 1;\r\n\r\n    return remainder >= 0 ? number + (1 - remainder) % 1 : number - remainder;\r\n  },\r\n  round: Math.round || function round(number = NaN) {\r\n    const transform = number + 0.5;\r\n    const remainder = transform % 1;\r\n\r\n    return remainder >= 0 ? transform - remainder : transform - 1 - remainder;\r\n  },\r\n  truncate: Math.truncate || function truncate(number = NaN) {\r\n    return number - (number % 1) + offset;\r\n  },\r\n};\r\n"]}